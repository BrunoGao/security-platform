// ÂÆâÂÖ®ÂëäË≠¶ÂàÜÊûêÁ≥ªÁªüÊºîÁ§∫ÁïåÈù¢ JavaScript Â∫îÁî®

class DemoApp {
    constructor() {
        this.socket = null;
        this.autoScroll = true;
        this.statusInterval = null;
        this.systemInfo = null;
        this.lastStatusUpdate = null;
        
        this.init();
    }
    
    init() {
        console.log('üöÄ ÂàùÂßãÂåñÊºîÁ§∫Â∫îÁî®...');
        
        // È¶ñÂÖàÈöêËóèÂä†ËΩΩÈÅÆÁΩ©Â±Ç
        this.hideLoading();
        
        // ÂàùÂßãÂåñWebSocketËøûÊé•
        this.initWebSocket();
        
        // ÂàùÂßãÂåñÈ°µÈù¢ÂÖÉÁ¥†
        this.initPageElements();
        
        // ÂºÄÂßãÂÆöÊó∂Êõ¥Êñ∞
        this.startStatusUpdates();
        
        // ÁªëÂÆö‰∫ã‰ª∂Â§ÑÁêÜÂô®
        this.bindEventHandlers();
        
        console.log('‚úÖ ÊºîÁ§∫Â∫îÁî®ÂàùÂßãÂåñÂÆåÊàê');
    }
    
    initWebSocket() {
        try {
            this.socket = io();
            
            this.socket.on('connect', () => {
                console.log('üîå WebSocketËøûÊé•ÊàêÂäü');
                this.showNotification('WebSocketËøûÊé•ÊàêÂäü', 'success');
            });
            
            this.socket.on('disconnect', () => {
                console.log('üîå WebSocketËøûÊé•Êñ≠ÂºÄ');
                this.showNotification('WebSocketËøûÊé•Êñ≠ÂºÄ', 'warning');
            });
            
            this.socket.on('log_update', (data) => {
                this.addLogEntry(data);
            });
            
            this.socket.on('status_update', (data) => {
                this.updateSystemStatus(data);
            });
            
        } catch (error) {
            console.error('WebSocketÂàùÂßãÂåñÂ§±Ë¥•:', error);
            this.showNotification('WebSocketËøûÊé•Â§±Ë¥•', 'error');
        }
    }
    
    initPageElements() {
        // Êõ¥Êñ∞ÂΩìÂâçÊó∂Èó¥
        this.updateCurrentTime();
        setInterval(() => this.updateCurrentTime(), 1000);
        
        // ÂàùÂßãÂåñËøõÂ∫¶ÂúÜÁéØ
        this.initProgressCircles();
        
        // Âä†ËΩΩÂàùÂßãÊï∞ÊçÆ
        this.loadInitialData();
    }
    
    bindEventHandlers() {
        // Â§ÑÁêÜÈ°µÈù¢ÂèØËßÅÊÄßÂèòÂåñ
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                this.pauseUpdates();
            } else {
                this.resumeUpdates();
            }
        });
        
        // Â§ÑÁêÜÁ™óÂè£ÂÖ≥Èó≠
        window.addEventListener('beforeunload', () => {
            if (this.socket) {
                this.socket.disconnect();
            }
        });
    }
    
    startStatusUpdates() {
        this.refreshStatus();
        this.statusInterval = setInterval(() => {
            this.refreshStatus();
        }, 20000); // ÊØè20ÁßíÊõ¥Êñ∞‰∏ÄÊ¨°Ôºà‰ªé10Áßí‰ºòÂåñÂà∞20ÁßíÔºâ
    }
    
    pauseUpdates() {
        if (this.statusInterval) {
            clearInterval(this.statusInterval);
            this.statusInterval = null;
        }
    }
    
    resumeUpdates() {
        if (!this.statusInterval) {
            this.startStatusUpdates();
        }
    }
    
    updateCurrentTime() {
        const now = new Date();
        const timeString = now.toLocaleString('zh-CN', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
        
        const timeElement = document.getElementById('current-time');
        if (timeElement) {
            timeElement.textContent = timeString;
        }
    }
    
    initProgressCircles() {
        const circles = document.querySelectorAll('.progress-circle');
        circles.forEach(circle => {
            circle.style.setProperty('--percent', '0%');
        });
    }
    
    async loadInitialData() {
        try {
            await this.refreshStatus();
            await this.loadLogs();
        } catch (error) {
            console.error('Âä†ËΩΩÂàùÂßãÊï∞ÊçÆÂ§±Ë¥•:', error);
        }
    }
    
    async refreshStatus() {
        try {
            const response = await fetch('/api/system/status');
            const data = await response.json();
            
            this.updateSystemStatus(data);
            this.lastStatusUpdate = new Date();
            
            // Êõ¥Êñ∞ÊúÄÂêéÊõ¥Êñ∞Êó∂Èó¥
            const lastUpdateElement = document.getElementById('last-update');
            if (lastUpdateElement) {
                lastUpdateElement.textContent = this.lastStatusUpdate.toLocaleTimeString('zh-CN');
            }
            
        } catch (error) {
            console.error('Âà∑Êñ∞Áä∂ÊÄÅÂ§±Ë¥•:', error);
            this.showNotification('Áä∂ÊÄÅÂà∑Êñ∞Â§±Ë¥•', 'error');
        }
    }
    
    updateSystemStatus(data) {
        // Êõ¥Êñ∞Á≥ªÁªüÁä∂ÊÄÅÂæΩÁ´†
        const statusElement = document.getElementById('system-status');
        if (statusElement && data.system_status) {
            const statusMap = {
                'running': { text: 'ËøêË°å‰∏≠', class: 'bg-success' },
                'starting': { text: 'ÂêØÂä®‰∏≠', class: 'bg-warning' },
                'stopping': { text: 'ÂÅúÊ≠¢‰∏≠', class: 'bg-warning' },
                'stopped': { text: 'Â∑≤ÂÅúÊ≠¢', class: 'bg-danger' },
                'failed': { text: 'ÂºÇÂ∏∏', class: 'bg-danger' },
                'unknown': { text: 'Êú™Áü•', class: 'bg-secondary' }
            };
            
            const status = statusMap[data.system_status] || statusMap['unknown'];
            statusElement.textContent = status.text;
            statusElement.className = `badge ${status.class}`;
        }
        
        // Êõ¥Êñ∞DockerÊúçÂä°Áä∂ÊÄÅ
        if (data.docker && data.docker.services) {
            this.updateServicesStatus(data.docker.services);
        }
        
        // Êõ¥Êñ∞Á≥ªÁªüËµÑÊ∫ê‰ø°ÊÅØ
        this.updateSystemResources();
        
        // Êõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄÅ
        this.updateControlButtons(data);
    }
    
    updateServicesStatus(services) {
        const container = document.getElementById('services-status');
        if (!container) return;
        
        const servicesList = [
            { key: 'elasticsearch', name: 'Elasticsearch', icon: 'fas fa-search' },
            { key: 'kibana', name: 'Kibana', icon: 'fas fa-chart-bar' },
            { key: 'neo4j', name: 'Neo4j', icon: 'fas fa-project-diagram' },
            { key: 'mysql', name: 'MySQL', icon: 'fas fa-database' },
            { key: 'redis', name: 'Redis', icon: 'fas fa-memory' },
            { key: 'kafka', name: 'Kafka', icon: 'fas fa-stream' }
        ];
        
        let html = '';
        servicesList.forEach(service => {
            const serviceData = services[service.key];
            const status = serviceData ? serviceData.status : 'unknown';
            const isRunning = status && status.toLowerCase().includes('up');
            
            const statusClass = isRunning ? 'status-running' : 'status-stopped';
            const statusText = isRunning ? 'ËøêË°å‰∏≠' : 'Â∑≤ÂÅúÊ≠¢';
            const statusIcon = isRunning ? 'fas fa-check-circle text-success' : 'fas fa-times-circle text-danger';
            
            html += `
                <div class="col-md-4 col-sm-6">
                    <div class="service-status ${statusClass}">
                        <div class="service-icon">
                            <i class="${service.icon}"></i>
                        </div>
                        <div class="service-name">${service.name}</div>
                        <div class="service-state">
                            <i class="${statusIcon} me-1"></i>
                            ${statusText}
                        </div>
                    </div>
                </div>
            `;
        });
        
        container.innerHTML = html;
    }
    
    async updateSystemResources() {
        try {
            const response = await fetch('/api/system/info');
            const data = await response.json();
            
            if (data.cpu) {
                this.updateProgressCircle('cpu-progress', data.cpu.percent, 'CPU');
            }
            
            if (data.memory) {
                this.updateProgressCircle('memory-progress', data.memory.percent, 'ÂÜÖÂ≠ò');
            }
            
            if (data.disk) {
                this.updateProgressCircle('disk-progress', data.disk.percent, 'Á£ÅÁõò');
            }
            
        } catch (error) {
            console.error('Êõ¥Êñ∞Á≥ªÁªüËµÑÊ∫êÂ§±Ë¥•:', error);
        }
    }
    
    updateProgressCircle(elementId, percent, label) {
        const element = document.getElementById(elementId);
        if (!element) return;
        
        const roundedPercent = Math.round(percent);
        element.style.setProperty('--percent', `${roundedPercent}%`);
        
        const textElement = element.querySelector('.progress-text');
        if (textElement) {
            textElement.innerHTML = `${label}<br><strong>${roundedPercent}%</strong>`;
        }
        
        // Ê†πÊçÆ‰ΩøÁî®ÁéáËÆæÁΩÆÈ¢úËâ≤
        let color = '#0d6efd'; // ÈªòËÆ§ËìùËâ≤
        if (percent > 80) {
            color = '#dc3545'; // Á∫¢Ëâ≤
        } else if (percent > 60) {
            color = '#ffc107'; // ÈªÑËâ≤
        } else if (percent > 40) {
            color = '#fd7e14'; // Ê©ôËâ≤
        }
        
        element.style.setProperty('--primary-color', color);
    }
    
    updateControlButtons(data) {
        const startBtn = document.getElementById('start-btn');
        const stopBtn = document.getElementById('stop-btn');
        const restartBtn = document.getElementById('restart-btn');
        
        if (data.is_starting) {
            this.setButtonLoading(startBtn, 'ÂêØÂä®‰∏≠...');
            this.disableButton(stopBtn);
            this.disableButton(restartBtn);
        } else if (data.is_stopping) {
            this.setButtonLoading(stopBtn, 'ÂÅúÊ≠¢‰∏≠...');
            this.disableButton(startBtn);
            this.disableButton(restartBtn);
        } else {
            this.resetButton(startBtn, 'ÂêØÂä®Á≥ªÁªü', 'fas fa-play');
            this.resetButton(stopBtn, 'ÂÅúÊ≠¢Á≥ªÁªü', 'fas fa-stop');
            this.resetButton(restartBtn, 'ÈáçÂêØÁ≥ªÁªü', 'fas fa-redo');
        }
    }
    
    setButtonLoading(button, text) {
        if (!button) return;
        button.disabled = true;
        button.innerHTML = `<i class="fas fa-spinner fa-spin me-2"></i>${text}`;
    }
    
    disableButton(button) {
        if (!button) return;
        button.disabled = true;
        button.classList.add('opacity-50');
    }
    
    resetButton(button, text, icon) {
        if (!button) return;
        button.disabled = false;
        button.classList.remove('opacity-50');
        button.innerHTML = `<i class="${icon} me-2"></i>${text}`;
    }
    
    async loadLogs() {
        try {
            const response = await fetch('/api/logs?limit=50');
            const data = await response.json();
            
            if (data.logs && data.logs.length > 0) {
                data.logs.forEach(log => this.addLogEntry(log));
            }
            
        } catch (error) {
            console.error('Âä†ËΩΩÊó•ÂøóÂ§±Ë¥•:', error);
        }
    }
    
    addLogEntry(logData) {
        const container = document.getElementById('log-container');
        if (!container) return;
        
        // Ê∏ÖÈô§ÂàùÂßãÊ∂àÊÅØ
        const initialMessage = container.querySelector('.text-center');
        if (initialMessage) {
            initialMessage.remove();
        }
        
        const logElement = document.createElement('div');
        logElement.className = `log-entry log-${logData.level.toLowerCase()}`;
        
        const timestamp = new Date(logData.timestamp).toLocaleTimeString('zh-CN');
        logElement.innerHTML = `
            <span class="log-timestamp">[${timestamp}]</span>
            <span class="log-level">[${logData.level}]</span>
            <span class="log-message">${logData.message}</span>
        `;
        
        container.appendChild(logElement);
        
        // Ëá™Âä®ÊªöÂä®Âà∞Â∫ïÈÉ®
        if (this.autoScroll) {
            container.scrollTop = container.scrollHeight;
        }
        
        // ÈôêÂà∂Êó•ÂøóÊù°Êï∞ÔºåÈÅøÂÖçÂÜÖÂ≠òËøáÂ§öÂç†Áî®
        const maxLogs = 200;
        const logEntries = container.querySelectorAll('.log-entry');
        if (logEntries.length > maxLogs) {
            logEntries[0].remove();
        }
    }
    
    showNotification(message, type = 'info', duration = 3000) {
        // ÂàõÂª∫ÈÄöÁü•ÂÖÉÁ¥†
        const notification = document.createElement('div');
        notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
        notification.style.cssText = 'top: 20px; right: 20px; z-index: 10000; min-width: 300px;';
        
        notification.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        document.body.appendChild(notification);
        
        // Ëá™Âä®ÁßªÈô§ÈÄöÁü•
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, duration);
    }
    
    showLoading() {
        const overlay = document.getElementById('loading-overlay');
        if (overlay) {
            overlay.classList.remove('d-none');
        }
    }
    
    hideLoading() {
        const overlay = document.getElementById('loading-overlay');
        if (overlay) {
            overlay.classList.add('d-none');
        }
    }
}

// ÂÖ®Â±ÄÂáΩÊï∞ÂÆö‰πâ
window.demoApp = null;

// Á≥ªÁªüÊéßÂà∂ÂáΩÊï∞
async function startSystem() {
    if (!confirm('Á°ÆÂÆöË¶ÅÂêØÂä®ÂÆâÂÖ®ÂëäË≠¶ÂàÜÊûêÁ≥ªÁªüÂêóÔºü')) return;
    
    window.demoApp.showLoading();
    
    try {
        const response = await fetch('/api/system/start', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        });
        
        const data = await response.json();
        
        if (data.success) {
            window.demoApp.showNotification('Á≥ªÁªüÂêØÂä®ÂëΩ‰ª§Â∑≤ÂèëÈÄÅ', 'success');
        } else {
            window.demoApp.showNotification(`ÂêØÂä®Â§±Ë¥•: ${data.message}`, 'error');
        }
        
    } catch (error) {
        console.error('ÂêØÂä®Á≥ªÁªüÂ§±Ë¥•:', error);
        window.demoApp.showNotification('ÂêØÂä®Á≥ªÁªüÂ§±Ë¥•', 'error');
    } finally {
        window.demoApp.hideLoading();
    }
}

async function stopSystem() {
    if (!confirm('Á°ÆÂÆöË¶ÅÂÅúÊ≠¢ÂÆâÂÖ®ÂëäË≠¶ÂàÜÊûêÁ≥ªÁªüÂêóÔºü')) return;
    
    window.demoApp.showLoading();
    
    try {
        const response = await fetch('/api/system/stop', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        });
        
        const data = await response.json();
        
        if (data.success) {
            window.demoApp.showNotification('Á≥ªÁªüÂÅúÊ≠¢ÂëΩ‰ª§Â∑≤ÂèëÈÄÅ', 'success');
        } else {
            window.demoApp.showNotification(`ÂÅúÊ≠¢Â§±Ë¥•: ${data.message}`, 'error');
        }
        
    } catch (error) {
        console.error('ÂÅúÊ≠¢Á≥ªÁªüÂ§±Ë¥•:', error);
        window.demoApp.showNotification('ÂÅúÊ≠¢Á≥ªÁªüÂ§±Ë¥•', 'error');
    } finally {
        window.demoApp.hideLoading();
    }
}

async function restartSystem() {
    if (!confirm('Á°ÆÂÆöË¶ÅÈáçÂêØÂÆâÂÖ®ÂëäË≠¶ÂàÜÊûêÁ≥ªÁªüÂêóÔºüËøôÂèØËÉΩÈúÄË¶ÅÂá†ÂàÜÈíüÊó∂Èó¥„ÄÇ')) return;
    
    window.demoApp.showLoading();
    
    try {
        const response = await fetch('/api/system/restart', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        });
        
        const data = await response.json();
        
        if (data.success) {
            window.demoApp.showNotification('Á≥ªÁªüÈáçÂêØÂëΩ‰ª§Â∑≤ÂèëÈÄÅ', 'success');
        } else {
            window.demoApp.showNotification(`ÈáçÂêØÂ§±Ë¥•: ${data.message}`, 'error');
        }
        
    } catch (error) {
        console.error('ÈáçÂêØÁ≥ªÁªüÂ§±Ë¥•:', error);
        window.demoApp.showNotification('ÈáçÂêØÁ≥ªÁªüÂ§±Ë¥•', 'error');
    } finally {
        window.demoApp.hideLoading();
    }
}

async function createTestEvent() {
    try {
        const response = await fetch('/api/demo/test-event', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        });
        
        const data = await response.json();
        
        if (data.success) {
            window.demoApp.showNotification('ÊµãËØï‰∫ã‰ª∂ÂàõÂª∫ÊàêÂäü', 'success');
        } else {
            window.demoApp.showNotification(`ÂàõÂª∫Â§±Ë¥•: ${data.message}`, 'error');
        }
        
    } catch (error) {
        console.error('ÂàõÂª∫ÊµãËØï‰∫ã‰ª∂Â§±Ë¥•:', error);
        window.demoApp.showNotification('ÂàõÂª∫ÊµãËØï‰∫ã‰ª∂Â§±Ë¥•', 'error');
    }
}

async function showDemoScenarios() {
    try {
        const response = await fetch('/api/demo/scenarios');
        const data = await response.json();
        
        const modalBody = document.querySelector('#demoScenariosModal .modal-body #demo-scenarios-list');
        if (!modalBody) return;
        
        let html = '';
        data.scenarios.forEach(scenario => {
            html += `
                <div class="scenario-card" onclick="runDemoScenario('${scenario.id}')">
                    <div class="scenario-title">${scenario.name}</div>
                    <div class="scenario-description">${scenario.description}</div>
                    <div class="scenario-meta">
                        <span><i class="fas fa-calendar me-1"></i>‰∫ã‰ª∂Êï∞: ${scenario.events}</span>
                        <span><i class="fas fa-clock me-1"></i>ÊåÅÁª≠Êó∂Èó¥: ${scenario.duration}</span>
                    </div>
                </div>
            `;
        });
        
        modalBody.innerHTML = html;
        
        // ÊòæÁ§∫Ê®°ÊÄÅÊ°Ü
        const modal = new bootstrap.Modal(document.getElementById('demoScenariosModal'));
        modal.show();
        
    } catch (error) {
        console.error('Âä†ËΩΩÊºîÁ§∫Âú∫ÊôØÂ§±Ë¥•:', error);
        window.demoApp.showNotification('Âä†ËΩΩÊºîÁ§∫Âú∫ÊôØÂ§±Ë¥•', 'error');
    }
}

async function runDemoScenario(scenarioId) {
    if (!confirm(`Á°ÆÂÆöË¶ÅËøêË°åÊºîÁ§∫Âú∫ÊôØ"${scenarioId}"ÂêóÔºü`)) return;
    
    try {
        const response = await fetch(`/api/demo/run-scenario/${scenarioId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        });
        
        const data = await response.json();
        
        if (data.success) {
            window.demoApp.showNotification(`ÊºîÁ§∫Âú∫ÊôØ"${scenarioId}"ÂºÄÂßãÊâßË°å`, 'success');
            
            // ÂÖ≥Èó≠Ê®°ÊÄÅÊ°Ü
            const modal = bootstrap.Modal.getInstance(document.getElementById('demoScenariosModal'));
            if (modal) modal.hide();
        } else {
            window.demoApp.showNotification(`Âú∫ÊôØÊâßË°åÂ§±Ë¥•: ${data.message}`, 'error');
        }
        
    } catch (error) {
        console.error('ËøêË°åÊºîÁ§∫Âú∫ÊôØÂ§±Ë¥•:', error);
        window.demoApp.showNotification('ËøêË°åÊºîÁ§∫Âú∫ÊôØÂ§±Ë¥•', 'error');
    }
}

async function openServiceUrls() {
    try {
        const response = await fetch('/api/system/status');
        const data = await response.json();
        
        const modalBody = document.querySelector('#serviceUrlsModal .modal-body #service-urls-list');
        if (!modalBody) return;
        
        const urls = data.urls || {};
        const urlList = [
            { key: 'api', name: 'APIÊúçÂä°', icon: 'fas fa-code' },
            { key: 'api_docs', name: 'APIÊñáÊ°£', icon: 'fas fa-book' },
            { key: 'kibana', name: 'Kibana', icon: 'fas fa-chart-bar' },
            { key: 'neo4j', name: 'Neo4j', icon: 'fas fa-project-diagram' },
            { key: 'clickhouse', name: 'ClickHouse', icon: 'fas fa-database' },
            { key: 'kafka_ui', name: 'Kafka UI', icon: 'fas fa-stream' },
            { key: 'elasticsearch', name: 'Elasticsearch', icon: 'fas fa-search' }
        ];
        
        let html = '';
        urlList.forEach(item => {
            const url = urls[item.key];
            if (url) {
                html += `
                    <div class="col-md-6">
                        <div class="url-card">
                            <div class="d-flex align-items-center">
                                <i class="${item.icon} me-3 text-info"></i>
                                <div>
                                    <strong>${item.name}</strong><br>
                                    <a href="${url}" target="_blank">${url}</a>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            }
        });
        
        modalBody.innerHTML = html;
        
        // ÊòæÁ§∫Ê®°ÊÄÅÊ°Ü
        const modal = new bootstrap.Modal(document.getElementById('serviceUrlsModal'));
        modal.show();
        
    } catch (error) {
        console.error('Âä†ËΩΩÊúçÂä°ÈìæÊé•Â§±Ë¥•:', error);
        window.demoApp.showNotification('Âä†ËΩΩÊúçÂä°ÈìæÊé•Â§±Ë¥•', 'error');
    }
}

function refreshStatus() {
    if (window.demoApp) {
        window.demoApp.refreshStatus();
    }
}

function clearLogs() {
    const container = document.getElementById('log-container');
    if (container) {
        container.innerHTML = '<div class="text-center text-muted p-4">Êó•ÂøóÂ∑≤Ê∏ÖÁ©∫</div>';
    }
}

function toggleAutoScroll() {
    if (window.demoApp) {
        window.demoApp.autoScroll = !window.demoApp.autoScroll;
        const message = window.demoApp.autoScroll ? 'Ëá™Âä®ÊªöÂä®Â∑≤ÂºÄÂêØ' : 'Ëá™Âä®ÊªöÂä®Â∑≤ÂÖ≥Èó≠';
        window.demoApp.showNotification(message, 'info');
    }
}

// È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñÂ∫îÁî®
document.addEventListener('DOMContentLoaded', function() {
    console.log('üì± È°µÈù¢Âä†ËΩΩÂÆåÊàêÔºåÂàùÂßãÂåñÊºîÁ§∫Â∫îÁî®...');
    window.demoApp = new DemoApp();
});